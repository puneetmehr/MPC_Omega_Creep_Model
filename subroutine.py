# -*- coding: utf-8 -*-
"""
Created on Mon Aug  9 16:41:55 2021

@author: pmehra
"""
def omega_model(project,date,mat,mats,matname,odata,ldata,wdata,sindata,delo,beta_omega,alpha):
    fname=project+"_omega.f"
    f=open(fname,"w+")
    #main code to create subroutine file
    f.write("c*******************************************************************\n")
    f.write("c Subroutine written using maincode.py on "+date+" *\n")
    f.write("c Name - omega_creep_rev0										   *\n")
    f.write("c Revision - 0 (written by PM on 04/18/2020) 					   *\n")
    f.write("c*******************************************************************\n")
    f.write("c Abaqus subroutine to calculate creep strain using MPC Omega creep*\n")
    f.write("c model and damage due to creep based on API 579 Part 10 using MPC *\n")
    f.write("c Omega and LMP method based on API 530 and WRC 541.			   *\n")
    f.write("c*******************************************************************\n")
    f.write("c Written by Puneet Mehra										   *\n")
    f.write("c*******************************************************************\n")
    f.write("c 					Information                                    *\n")
    f.write("c  statev: 1 - 3 Principal Stresses (PS1<PS2<PS3)                  *\n")
    f.write("c          4 sige (effective stress)                               *\n")
    f.write("c          5 min  creep damage (WRC541)                            *\n")
    f.write("c          6 mean creep damage (WRC541)                            *\n")
    f.write("c          7 min creep damage (API 530)                            *\n")
    f.write("c          8 avg creep damage (API 530)                            *\n")
    f.write("c          9 MPC Omega creep damage                                *\n")
    f.write("c things to check:												   *\n")
    f.write("c     unitf                                                        *\n")
    f.write("c     zhours                                                       *\n")
    f.write("c     tfact                                                        *\n")
    f.write("c     definition of temp                                           *\n")
    f.write("c     decra(1) and decra(5)                                        *\n")
    f.write("c  need to define creep, depvar, electrical conductivity, USDFLD   *\n")
    f.write("c 		 														   *\n")
    f.write("c*******************************************************************\n")
    f.write("      SUBROUTINE USDFLD(FIELD, STATEV, PNEWDT, DIRECT, T, CELENT, TIME,      \n")
    f.write("     1 DTIME, CMNAME, ORNAME, NFIELD, NSTATV, NOEL, NPT, LAYER, KSPT, KSTEP, \n")
    f.write("     2 KINC, NDI, NSHR, COORD, JMAC, JMTYP, MATLAYO, LACCFLA)                \n")
    f.write("c                                                                            \n")
    f.write("      INCLUDE 'ABA_PARAM.INC'                                                \n")
    f.write("c                                                                            \n")
    f.write("      CHARACTER*80 CMNAME,ORNAME                                             \n")
    f.write("      CHARACTER*3  FLGRAY(15)                                                \n")
    f.write("      DIMENSION FIELD(NFIELD), STATEV(NSTATV), DIRECT(3,3), T(3,3), TIME(2)  \n")
    f.write("      DIMENSION ARRAY(15), JARRAY(15), COORD(*), JMAC(*), JMTYP(*)           \n")
    f.write("c********************************************************************        \n")
    f.write("c Get Principal stresses from previous increment					*         \n")
    f.write("c********************************************************************        \n")
    f.write("      CALL GETVRM('SP', ARRAY, JARRAY, FLGRAY, JRCD, JMAC, JMTYP,            \n")
    f.write("     1 MATLAYO, LACCFLA)                                                     \n")
    f.write("      FIELD(1) = ARRAY(1)                                                    \n")
    f.write("      FIELD(2) = ARRAY(2)                                                    \n")
    f.write("      FIELD(3) = ARRAY(3)                                                    \n")
    f.write("c                                                                            \n")
    f.write("      STATEV(1) = FIELD(1)                                                   \n")
    f.write("      STATEV(2) = FIELD(2)                                                   \n")
    f.write("      STATEV(3) = FIELD(3)                                                   \n")
    f.write("C                                                                            \n")
    f.write("      RETURN                                                                 \n")
    f.write("      END                                                                    \n")
    f.write("c*********************************************************************\n")
    f.write("c Creep using the MPC Omega creep model							     *\n")
    f.write("c*********************************************************************\n")
    f.write("      subroutine creep(decra, deswa, statev, serd, ec, esw, p, qtild, \n")
    f.write("     1  temp, dtemp, predef, dpred, time, dtime, CMNAME, leximp, lend,\n")
    f.write("     2  coords, nstatv, noel, npt, layer, kspt, kstep, kinc)          \n")
    f.write("c                                                                     \n")
    f.write("        include 'ABA_PARAM.INC'                                       \n")
    f.write("c                                                                     \n")
    f.write("        character*80 CMNAME                                           \n")
    f.write("c                                                                     \n")
    f.write("        dimension decra(5), deswa(5), statev(nstatv), predef(*),      \n")
    f.write("     1  dpred(*), time(2), coords(*),ec(2),a(5), b(5), c(2), d(2)     \n")
    f.write("c                                                                     \n")
    f.write("		real*8 ssum,del_omega,eta_bn,eps_dotco,omega,omega_n,omega_m   \n")
    f.write("	    real*8 depsc,depscdq1,depscdq2,depscdq3,depscdq31,depscdq32    \n")
    f.write("	    real*8 depscdq5,depscdq,depscdq4,sl,tempr,ze                   \n")
    f.write("		real*8 zlife1,zlife2,zlife3,zlife4,zlife5   \n")
    f.write("c*********************************************************************\n")
    f.write("c   Call matprop for MPC Omega model parameters                      *\n")
    f.write("c*********************************************************************\n")
    f.write("C Set units factor, 1 for ksi, 1000 for psi      \n")
    f.write("c     unitf = 1000.0d0                          \n")
    f.write("      unitf = 1.0d0                              \n")
    f.write("      call matprop(CMNAME,a,b,c,d)               \n")
    f.write("	  a(0)=a(1)                                   \n")
    f.write("	  a(1)=a(2)                                   \n")
    f.write("	  a(2)=a(3)                                   \n")
    f.write("	  a(3)=a(4)                                   \n")
    f.write("	  a(4)=a(5)                                   \n")
    f.write("	  b(0)=b(1)                                   \n")
    f.write("	  b(1)=b(2)                                   \n")
    f.write("	  b(2)=b(3)                                   \n")
    f.write("	  b(3)=b(4)                                   \n")
    f.write("	  b(4)=b(5)	                                  \n")
    f.write("c                                                \n")
    f.write("      wsrf = 1.0d0                               \n")
    f.write("c                                                \n")
    f.write("c	define use of wsrf                            \n")
    f.write("c                                                \n")
    f.write("	  sige=qtild                                  \n")
    f.write("	  sige = sige/unitf/wsrf                      \n")
    f.write("	  qtild = qtild/unitf                         \n")
    f.write("	  statev(4)=sige                              \n")
    f.write("c                                                \n")
    f.write("c                                                \n")
    f.write("C *********************************************  \n")
    f.write("c     Default units, hours, F, ksi               \n")
    f.write("C *********************************************  \n")
    f.write("c                                                \n")
    f.write("c  Factor tfact =3600.0 is for use with coupled thermal analysis in seconds     \n")
    f.write("c  Otherwise tfact = 1.0                                                        \n")
    f.write("c                                                                               \n")
    f.write("      tfact = 3600.d0                                                         \n")
    f.write("      tfact = 1.0d0                                                           \n")
    f.write("c******************************************************************             \n")
    f.write("c  Creep analysis using MPC Omega model from API-579 Part 10	                 \n")
    f.write("c  Refer documentation                                                          \n")
    f.write("c******************************************************************             \n")
    f.write("c 	c(1)=beta_omega                                                              \n")
    f.write("c   c(2)=alpha_omega                                                            \n")
    f.write("c   d(1)=del_cd                                                                 \n")
    f.write("c   d(2)=del_sr                                                                 \n")
    f.write("c   depsc=Delta_eps_c (creep strain increment)                                  \n")
    f.write("c   depscdq=Delta_eps_c_dq (differential of creep strain increment wrt to qtild)\n")
    f.write("c******************************************************************               \n")
    f.write("	  ze = 2.718281828d0                                                           \n")
    f.write("	  tempr=temp+460.0d0                                                           \n")
    f.write("	  sl=log(qtild)/log(10.0d0)                                                    \n")
    f.write("c	                                                                               \n")
    f.write("      ssum=statev(1)+statev(2)+statev(3)                                          \n")
    f.write("	  del_omega=c(1)*(ssum/qtild-1)                                                \n")
    f.write("	  eta_bn=-((a(2)+2*a(3)*sl+3*a(4)*sl**2)/tempr)                                \n")
    f.write("	  eps_dotco=10.0d0**(-((a(0)+d(2))+(a(1)+a(2)*sl+a(3)*sl**2+a(4)*sl**3)/tempr))\n")
    f.write("	  omega=10.0d0**((b(0)+d(1))+((b(1)+b(2)*sl+b(3)*sl**2+b(4)*sl**3)/tempr))     \n")
    f.write("	  omega_n=max((omega-eta_bn),3.0d0)                                            \n")
    f.write("      omega_m=omega_n**(del_omega+1.0d0)+c(2)*eta_bn                              \n")
    f.write("c	                                                                               \n")
    f.write("	  depsc=eps_dotco*ze**(omega_m*ec(1))                                          \n")
    f.write("c******************************************************************               \n")
    f.write("	  if(omega_n.eq.3.0d0)then                                                     \n")
    f.write("	  depscdq1=(-3.0d0**(del_omega+1)*c(1)*ssum*log(3.0d0))/qtild**2-(c(2)*(2*a(3)+6*a(4)*sl)/(qtild*log(10.0d0)*tempr)) \n")
    f.write("	  depscdq2=ze**(ec(1)*(3.0d0**(del_omega+1)+c(2)*eta_bn))                                                            \n")
    f.write("	  depscdq3=eps_dotco*eta_bn*depscdq2/qtild                                                                           \n")
    f.write("      depscdq=eps_dotco*ec(1)*depscdq1*depscdq2+depscdq3                                                                \n")
    f.write("c******************************************************************	                                                 \n")
    f.write("	  else if(omega_n.gt.3.0d0)then                                                                                      \n")
    f.write("	  depscdq1=-(c(2)*(2*a(3)+6*a(4)*sl))/(qtild*log(10.0d0)*tempr)                                                      \n")
    f.write("	  depscdq2=-c(1)*ssum*log(omega-eta_bn)/qtild**2                                                                     \n")
    f.write("	  depscdq31=(del_omega+1)*(omega*log(10.0d0)*(b(2)+2*b(3)*sl+3*b(4)*sl**2)+2*a(3)+6*a(4)*sl)                         \n")
    f.write("	  depscdq32=(omega-eta_bn)*(qtild*log(10.0d0)*tempr)                                                                 \n")
    f.write("	  depscdq4=ze**(ec(1)*(c(2)*eta_bn+(omega-eta_bn)**(del_omega+1)))                                                   \n")
    f.write("	  depscdq5=eps_dotco*(a(2)+2*a(3)*sl+3*a(4)*sl**2)*depscdq4/(qtild*tempr)                                            \n")
    f.write("c	                                                                                                                     \n")
    f.write("	  depscdq=eps_dotco*ec(1)*(depscdq1+(omega-eta_bn)**(del_omega+1)*(depscdq2+(depscdq31/depscdq32)))*depscdq4-depscdq5\n")
    f.write("	  end if                                                           \n")
    f.write("c                                                                     \n")
    f.write("	  decra(1) = dtime*depsc                                           \n")
    f.write("	  if(LEXIMP.eq.1) then                                             \n")
    f.write("	  decra(5) = dtime*depscdq                                         \n")
    f.write("	  end if                                                           \n")
    f.write("c******************************************************************   \n")
    f.write("c  Creep damage calculations 									  *    \n")
    f.write("c******************************************************************   \n")
    f.write("c min properties WRC 541                                              \n")
    f.write("      zlife1 = xlmlife(CMNAME,tempr,sige,0.0d0)                     \n")
    f.write("c avg properties WRC 541                                              \n")
    f.write("      zlife2 = xlmlife(CMNAME,tempr,sige,1.0d0)                     \n")
    f.write("c min properties API 530                                              \n")
    f.write("      zlife3 = xlmlife1(CMNAME,tempr,sige,0.0d0)                    \n")
    f.write("c avg properties API 530                                              \n")
    f.write("      zlife4 = xlmlife1(CMNAME,tempr,sige,1.0d0)                    \n")
    f.write("c MPC Omega                                                           \n")
    f.write("      zlife5 = 1.0d0/eps_dotco/omega_m                               \n")
    f.write("c min creep damage using WRC 541                                      \n")
    f.write("      statev(5) = statev(5) + dtime/tfact/zlife1                    \n")
    f.write("c avg creep damage using WRC 541                                      \n")
    f.write("      statev(6) = statev(6) + dtime/tfact/zlife2                    \n")
    f.write("c min creep damage using API 530                                      \n")
    f.write("      statev(7) = statev(7) + dtime/tfact/zlife3                    \n")
    f.write("c avg creep damage using API 530                                      \n")
    f.write("      statev(8) = statev(8) + dtime/tfact/zlife4                    \n")
    f.write("c creep damage using MPC Omega method                                 \n")
    f.write("      statev(9) = statev(9) + dtime/tfact/zlife5	                   \n")
    f.write("90    RETURN                                                          \n")
    f.write("      END                                                             \n")
    f.write("c *******************************************************************  \n")
    f.write("c Calculate life based on WRC 541 LMP Method                           \n")
    f.write("c *******************************************************************  \n")
    f.write("      real*8 function xlmlife(CMNAME,tempr,stress,flag)                \n")
    f.write("      implicit real*8(a-h,o-z)                                         \n")
    f.write("      real*8 lifemin, lifeavg                                         \n")
    f.write("      character*80 CMNAME                                              \n")
    i=0
    j=0
    f.write("c********************************************************************  \n")
    while i<mats:
        f.write("      IF (CMNAME.EQ.'"+matname[i]+"') Then\n")
        f.write("      cmin = "+str(wdata[i,0])+"d0\n")
        f.write("      cavg = "+str(wdata[i,1])+"d0\n")
        f.write("      a0 = "+str(wdata[i,2])+"d0\n")
        f.write("      a1 = "+str(wdata[i,3])+"d0\n")
        f.write("      a2 = "+str(wdata[i,4])+"d0\n")
        f.write("      a3 = "+str(wdata[i,5])+"d0\n")    
        f.write("      End if                                                           \n")
        f.write("c********************************************************************  \n")
        i+=1
    f.write("      xlogs = log(stress)/log(10.0d0)                                  \n")
    f.write("      xwrc = a0+a1*xlogs+a2*xlogs**2+a3*xlogs**3          \n")
    f.write("      lifemin = xwrc/tempr - cmin \n")
    f.write("      lifemin = 10.0d0**lifemin \n")
    f.write("      lifeavg = xwrc/tempr - cavg \n")
    f.write("      lifeavg = 10.0d0**lifeavg \n")
    f.write("c min properties, flag=0                                               \n")
    f.write("	  IF (flag.EQ.0.0d0) Then                                           \n")
    f.write("	    xlmlife=lifemin \n")
    f.write("	  ELSE IF (flag.EQ.1.0d0) Then                                           \n")
    f.write("	    xlmlife=lifeavg \n")
    f.write("	  End If\n")
    f.write("90    RETURN                                                           \n")
    f.write("      End                                                              \n")
    f.write("c********************************************************************  \n")
    f.write("c Calculate life based on the LMP method (API 530)					    \n")
    f.write("c********************************************************************  \n")
    f.write("c                                                                      \n")
    f.write("      real*8 function xlmlife1(CMNAME,tempr,stress,flag)               \n")
    f.write("	  implicit real*8(a-h,m-z)                                          \n")
    f.write("      character*80 CMNAME                                              \n")
    f.write("c     Equation 2 used for material pointers 7,8,9 and 13\n")
    f.write("      eqn=0.0d0\n")
    i=0
    j=0
    f.write("c********************************************************************  \n")
    while i<mats:
         f.write("      IF (CMNAME.EQ.'"+matname[i]+"') Then\n")
         f.write("      ma0 = "+str(ldata[i,0])+"d0\n")
         f.write("      ma1 = "+str(ldata[i,1])+"d0\n")
         f.write("      ma2 = "+str(ldata[i,2])+"d0\n")
         f.write("      ma3 = "+str(ldata[i,3])+"d0\n")
         f.write("      ma4 = "+str(ldata[i,4])+"d0\n")
         f.write("      ma5 = "+str(ldata[i,5])+"d0\n")
         f.write("      ma6 = "+str(ldata[i,6])+"d0\n")
         f.write("      cmin = "+str(ldata[i,7])+"d0\n")
         f.write("      aa0 = "+str(ldata[i,8])+"d0\n")
         f.write("      aa1 = "+str(ldata[i,9])+"d0\n")
         f.write("      aa2 = "+str(ldata[i,10])+"d0\n")
         f.write("      aa3 = "+str(ldata[i,11])+"d0\n")
         f.write("      aa4 = "+str(ldata[i,12])+"d0\n")
         f.write("      aa5 = "+str(ldata[i,13])+"d0\n")
         f.write("      aa6 = "+str(ldata[i,14])+"d0\n")
         f.write("      cavg = "+str(ldata[i,15])+"d0\n")
         if mat[i]+1==7:
             f.write("      eqn=7.0d0\n")
         elif mat[i]+1==8:
             f.write("      eqn=8.0d0\n")
         elif mat[i]+1==9:
             f.write("      eqn=9.0d0\n")
         elif mat[i]+1==13:
             f.write("      eqn=13.0d0\n")
         f.write("      End if                     \n")
         f.write("c********************************************************************  \n")
         i+=1
    f.write("	  xapi0=ma0+(ma1*stress)+(ma2*stress**2)+(ma3*log(stress))          \n")
    f.write("	  xapi1=aa0+(aa1*stress)+(aa2*stress**2)+(aa3*log(stress))          \n")
    f.write("	  xmin1=1000*xapi0/tempr-cmin                                        \n")
    f.write("	  xmin1=10.0d0**xmin1                                                 \n")
    f.write("	  xavg1=1000*xapi1/tempr-cavg                                        \n")
    f.write("	  xavg1=10.0d0**xavg1                                                \n")
    f.write("c********************************************************************  \n")
    f.write("	  xapi2n=(ma0+(ma2*stress**0.5)+(ma4*stress)+(ma6*stress**1.5))          \n")
    f.write("	  xapi2d=(1+(ma1*stress**0.5)+(ma3*stress)+(ma5*stress**1.5))          \n")
    f.write("	  xapi2=xapi2n/xapi2d          \n")
    f.write("	  xapi3n=(aa0+(aa2*stress**0.5)+(aa4*stress)+(aa6*stress**1.5))          \n")
    f.write("	  xapi3d=(1+(aa1*stress**0.5)+(aa3*stress)+(aa5*stress**1.5))          \n")
    f.write("	  xapi3=xapi2n/xapi2d          \n")
    f.write("	  xmin2=1000*xapi2/tempr-cmin                                        \n")
    f.write("	  xmin2=10.0d0**xmin2                                                 \n")
    f.write("	  xavg2=1000*xapi3/tempr-cavg                                        \n")
    f.write("	  xavg2=10.0d0**xavg2                                                 \n")
    f.write("c********************************************************************  \n")
    f.write("c min properties, flag=0                                               \n")
    f.write("	  IF (flag.EQ.0.0d0) Then                                           \n")
    f.write("	      IF (eqn.EQ.7.0d0) Then\n")
    f.write("	          xlmlife1=xmin2\n")
    f.write("	      ELSE IF (eqn.EQ.8.0d0) Then\n")
    f.write("	          xlmlife1=xmin2\n")
    f.write("	      ELSE IF (eqn.EQ.9.0d0) Then\n")
    f.write("	          xlmlife1=xmin2\n")
    f.write("	      ELSE IF (eqn.EQ.13.0d0) Then\n")
    f.write("	          xlmlife1=xmin2\n")
    f.write("	      ELSE IF (eqn.EQ.0.0d0) Then\n")
    f.write("	          xlmlife1=xmin1\n")
    f.write("	      End If\n")
    f.write("	  End if                                                            \n")
    f.write("c *********************************************************************\n")
    f.write("c avg properties, flag=1                                               \n")
    f.write("	  IF (flag.EQ.1.0d0) Then                                           \n")
    f.write("	      IF (eqn.EQ.7.0d0) Then\n")
    f.write("	          xlmlife1=xavg2\n")
    f.write("	      ELSE IF (eqn.EQ.8.0d0) Then\n")
    f.write("	          xlmlife1=xavg2\n")
    f.write("	      ELSE IF (eqn.EQ.9.0d0) Then\n")
    f.write("	          xlmlife1=xavg2\n")
    f.write("	      ELSE IF (eqn.EQ.13.0d0) Then\n")
    f.write("	          xlmlife1=xavg2\n")
    f.write("	      ELSE IF (eqn.EQ.0.0d0) Then\n")
    f.write("	          xlmlife1=xavg1\n")
    f.write("	      End If\n")
    f.write("	  End if                                                            \n")
    f.write("c                                                                      \n")
    f.write("90    RETURN                                                           \n")
    f.write("      End                                                              \n")
    f.write("c 	                                                                    \n")
    f.write("c *********************************************************************\n")
    f.write("c  Subroutine to get MPC Omega model parameters                        \n")
    f.write("c *********************************************************************\n")
    f.write("	  subroutine matprop(CMNAME,a,b,c,d)                                  \n")
    f.write("	  include 'ABA_PARAM.INC'                                             \n")
    f.write("	  character*80 CMNAME                                                 \n")
    f.write("	  dimension a(5),b(5),c(2),d(2)                                       \n")
    f.write("c 	  MPC Omega parameter (beta_omega)	                                \n")
    f.write("	  c(1)="+str(beta_omega)+"d0\n")
    f.write("c 	  Alpha parameter	                                                \n")
    f.write("	  c(2)="+str(alpha)+"d0\n")
    f.write("c	MPC Omega strain rate data from API-579                             \n")
    i=0
    j=0
    while i<mats:
        f.write("      IF (CMNAME.EQ.'"+matname[i]+"') Then\n")
        f.write("      a(1)="+str(odata[i,0])+"d0\n")
        f.write("      a(2)="+str(odata[i,1])+"d0\n")
        f.write("      a(3)="+str(odata[i,2])+"d0\n")
        f.write("      a(4)="+str(odata[i,3])+"d0\n")
        f.write("      a(5)="+str(odata[i,4])+"d0\n")
        f.write("      b(1)="+str(odata[i,5])+"d0\n")
        f.write("      b(2)="+str(odata[i,6])+"d0\n")
        f.write("      b(3)="+str(odata[i,7])+"d0\n")
        f.write("      b(4)="+str(odata[i,8])+"d0\n")
        f.write("      b(5)="+str(odata[i,9])+"d0\n")
        f.write("c 	  MPC Omega adjustment factor	                                    \n")
        f.write("c	  del_cd                                                            \n")
        f.write("	  d(1)="+str(delo[j+1])+"d0\n")
        f.write("c	  del_sr                                                            \n")
        f.write("	  d(2)="+str(delo[j])+"d0\n")
        f.write("	  End if\n")
        f.write("c                                                                      \n")
        f.write("***********************************************************************\n")
        i+=1
        j+=2
    f.write("50    return                                                           \n")
    f.write("      end                                                              \n")    
    f.close()
################################################################################################################    
def sinh_model(project,date,mat,mats,matname,odata,ldata,wdata,sindata,delo,beta_omega,alpha,peak,temp):
    fname=project+"_sinh.f"
    f=open(fname,"w+")
    #main code to create sinh subroutine file
    f.write("c*******************************************************************\n")
    f.write("c Subroutine written using maincode.py on "+date+" *\n")
    f.write("c Name - omega_creep_rev0										   *\n")
    f.write("c Revision - 0 (written by PM on 04/18/2020) 					   *\n")
    f.write("c*******************************************************************\n")
    f.write("c Abaqus subroutine to calculate creep strain using Sinh creep     *\n")
    f.write("c model and damage due to creep based on API 579 Part 10 using MPC *\n")
    f.write("c Omega and LMP method based on API 530 and WRC 541.			   *\n")
    f.write("c*******************************************************************\n")
    f.write("c Originally written by Peter Carter							   *\n")
    f.write("c Re-written by Puneet Mehra									   *\n")
    f.write("c*******************************************************************\n")
    f.write("c 					Information                                    *\n")
    f.write("c  statev: 1 - 3 Principal Stresses (PS1<PS2<PS3)                  *\n")
    f.write("c          4 sige (effective stress)                               *\n")
    f.write("c          5 min  creep damage (WRC541)                            *\n")
    f.write("c          6 mean creep damage (WRC541)                            *\n")
    f.write("c          7 min creep damage (API 530)                            *\n")
    f.write("c          8 avg creep damage (API 530)                            *\n")
    f.write("c          9 MPC Omega creep damage                                *\n")
    f.write("c things to check:												   *\n")
    f.write("c     unitf                                                        *\n")
    f.write("c     zhours                                                       *\n")
    f.write("c     tfact                                                        *\n")
    f.write("c     definition of temp                                           *\n")
    f.write("c     decra(1) and decra(5)                                        *\n")
    f.write("c  need to define creep, depvar, electrical conductivity, USDFLD   *\n")
    f.write("c 		 														   *\n")
    f.write("c*******************************************************************\n")
    f.write("      SUBROUTINE USDFLD(FIELD, STATEV, PNEWDT, DIRECT, T, CELENT, TIME,      \n")
    f.write("     1 DTIME, CMNAME, ORNAME, NFIELD, NSTATV, NOEL, NPT, LAYER, KSPT, KSTEP, \n")
    f.write("     2 KINC, NDI, NSHR, COORD, JMAC, JMTYP, MATLAYO, LACCFLA)                \n")
    f.write("c                                                                            \n")
    f.write("      INCLUDE 'ABA_PARAM.INC'                                                \n")
    f.write("c                                                                            \n")
    f.write("      CHARACTER*80 CMNAME,ORNAME                                             \n")
    f.write("      CHARACTER*3  FLGRAY(15)                                                \n")
    f.write("      DIMENSION FIELD(NFIELD), STATEV(NSTATV), DIRECT(3,3), T(3,3), TIME(2)  \n")
    f.write("      DIMENSION ARRAY(15), JARRAY(15), COORD(*), JMAC(*), JMTYP(*)           \n")
    f.write("c********************************************************************        \n")
    f.write("c Get Principal stresses from previous increment					*         \n")
    f.write("c********************************************************************        \n")
    f.write("      CALL GETVRM('SP', ARRAY, JARRAY, FLGRAY, JRCD, JMAC, JMTYP,            \n")
    f.write("     1 MATLAYO, LACCFLA)                                                     \n")
    f.write("      FIELD(1) = ARRAY(1)                                                    \n")
    f.write("      FIELD(2) = ARRAY(2)                                                    \n")
    f.write("      FIELD(3) = ARRAY(3)                                                    \n")
    f.write("c                                                                            \n")
    f.write("      STATEV(1) = FIELD(1)                                                   \n")
    f.write("      STATEV(2) = FIELD(2)                                                   \n")
    f.write("      STATEV(3) = FIELD(3)                                                   \n")
    f.write("C                                                                            \n")
    f.write("      RETURN                                                                 \n")
    f.write("      END                                                                    \n")
    f.write("c*********************************************************************\n")
    f.write("c Creep using the Sinh creep model                                   *\n")
    f.write("c*********************************************************************\n")
    f.write("      subroutine creep(decra, deswa, statev, serd, ec, esw, p, qtild, \n")
    f.write("     1  temp, dtemp, predef, dpred, time, dtime, CMNAME, leximp, lend,\n")
    f.write("     2  coords, nstatv, noel, npt, layer, kspt, kstep, kinc)          \n")
    f.write("c                                                                     \n")
    f.write("        include 'ABA_PARAM.INC'                                       \n")
    f.write("c                                                                     \n")
    f.write("        character*80 CMNAME                                           \n")
    f.write("c                                                                     \n")
    f.write("        dimension decra(5), deswa(5), statev(nstatv), predef(*),      \n")
    f.write("     1  dpred(*), time(2), coords(*),ec(2),a(5), b(5), c(2), d(2)     \n")
    f.write("c                                                                     \n")
    f.write("		real*8 acon, sig0, expn, wsrf, t1, t2, shcr, shdedq   \n")
    f.write("		real*8 zlife1,zlife2,zlife3,zlife4,zlife5   \n")
    f.write("c*********************************************************************\n")
    f.write("c   Call matprop for Sinh model parameters based on MPC Omega data   *\n")
    f.write("c*********************************************************************\n")
    f.write("C Set units factor, 1 for ksi, 1000 for psi                                     \n")
    f.write("c     unitf = 1000.0d0                                                         \n")
    f.write("      unitf = 1.0d0                                                             \n")
    f.write("      call matprop(CMNAME,acon,sig0,expn,wsrf)                                  \n")
    f.write("	  wsrf = wsrf                                                                 \n")
    f.write("	  acon = acon                                                                  \n")
    f.write("	  expn = expn                                                                  \n")
    f.write("	  sig0 = sig0                                                                  \n")
    f.write("c                                                                               \n")
    f.write("      wsrf = 1.0d0                                                              \n")
    f.write("c                                                                               \n")
    f.write("c	define use of wsrf                                                           \n")
    f.write("c                                                                               \n")
    f.write("	  sige=qtild                                                                 \n")
    f.write("	  sige = sige/unitf/wsrf                                                     \n")
    f.write("	  qtild = qtild/unitf                                                        \n")
    f.write("	  statev(4)=sige                                                             \n")
    f.write("c                                                                               \n")
    f.write("C *********************************************                                 \n")
    f.write("c     Default units, hours, F, ksi                                              \n")
    f.write("C *********************************************                                 \n")
    f.write("c                                                                               \n")
    f.write("c  Factor tfact =3600.0 is for use with coupled thermal analysis in seconds     \n")
    f.write("c  Otherwise tfact = 1.0                                                        \n")
    f.write("c                                                                               \n")
    f.write("      tfact = 3600.d0                                                         \n")
    f.write("      tfact = 1.0d0                                                           \n")
    f.write("c****************************************************************** \n")
    f.write("	  ze = 2.718281828d0                                             \n")
    f.write("	  tempr=temp+460.0d0                                             \n")
    f.write("c****************************************************************** \n")
    f.write("c  Creep analysis using Sinh creep model                           \n")
    f.write("c****************************************************************** \n")
    f.write("c                                                                   \n")
    f.write("      t1 = dexp(qtild/sig0)\n")
    f.write("      t2 = dexp(-qtild/sig0)\n")
    f.write("      shcr = acon*(0.5d0*(t1-t2))**expn\n")  
    f.write("      shdedq = expn*acon*(0.5d0*(t1-t2))**(expn-1.0d0)\n")
    f.write("      shdedq = shdedq/(sig0*0.5d0*(t1+t2))\n")
    f.write("	  decra(1) = dtime*shcr\n")
    f.write("	  if(LEXIMP.eq.1) then \n")
    f.write("	  decra(5) = dtime*shdedq \n")
    f.write("	  end if                                                                    \n")
    f.write("c******************************************************************            \n")
    f.write("c  Creep damage calculations 									  *             \n")
    f.write("c******************************************************************            \n")
    f.write("c min properties WRC 541                                                       \n")
    f.write("      zlife1 = xlmlife(CMNAME,tempr,sige,0.0d0)                              \n")
    f.write("c avg properties WRC 541                                                       \n")
    f.write("      zlife2 = xlmlife(CMNAME,tempr,sige,1.0d0)                              \n")
    f.write("c min properties API 530                                                       \n")
    f.write("      zlife3 = xlmlife1(CMNAME,tempr,sige,0.0d0)                             \n")
    f.write("c avg properties API 530                                                       \n")
    f.write("      zlife4 = xlmlife1(CMNAME,tempr,sige,1.0d0)                             \n")
    f.write("c MPC Omega                                                                    \n")
    f.write("      zlife5 = omegalife(CMNAME,tempr,sige,statev(1),statev(2),statev(3))\n")
    f.write("c min creep damage using WRC 541                                               \n")
    f.write("      statev(5) = statev(5) + dtime/tfact/zlife1                             \n")
    f.write("c avg creep damage using WRC 541                                               \n")
    f.write("      statev(6) = statev(6) + dtime/tfact/zlife2                             \n")
    f.write("c min creep damage using API 530                                               \n")
    f.write("      statev(7) = statev(7) + dtime/tfact/zlife3                             \n")
    f.write("c avg creep damage using API 530                                               \n")
    f.write("      statev(8) = statev(8) + dtime/tfact/zlife4                             \n")
    f.write("c creep damage using MPC Omega method                                          \n")
    f.write("      statev(9) = statev(9) + dtime/tfact/zlife5	                            \n")
    f.write("90    RETURN                                                                   \n")
    f.write("      END                                                                      \n")
    f.write("c *******************************************************************  \n")
    f.write("c Calculate life based on WRC 541 LMP Method                           \n")
    f.write("c *******************************************************************  \n")
    f.write("      real*8 function xlmlife(CMNAME,tempr,stress,flag)                \n")
    f.write("      implicit real*8(a-h,o-z)                                         \n")
    f.write("      real*8 lifemin, lifeavg                                         \n")
    f.write("      character*80 CMNAME                                              \n")
    i=0
    j=0
    f.write("c********************************************************************  \n")
    while i<mats:
        f.write("      IF (CMNAME.EQ.'"+matname[i]+"') Then\n")
        f.write("      cmin = "+str(wdata[i,0])+"d0\n")
        f.write("      cavg = "+str(wdata[i,1])+"d0\n")
        f.write("      a0 = "+str(wdata[i,2])+"d0\n")
        f.write("      a1 = "+str(wdata[i,3])+"d0\n")
        f.write("      a2 = "+str(wdata[i,4])+"d0\n")
        f.write("      a3 = "+str(wdata[i,5])+"d0\n")    
        f.write("      End if                                                           \n")
        f.write("c********************************************************************  \n")
        i+=1
    f.write("      xlogs = log(stress)/log(10.0d0)                                  \n")
    f.write("      xwrc = a0+a1*xlogs+a2*xlogs**2+a3*xlogs**3          \n")
    f.write("      lifemin = xwrc/tempr - cmin \n")
    f.write("      lifemin = 10.0d0**lifemin \n")
    f.write("      lifeavg = xwrc/tempr - cavg \n")
    f.write("      lifeavg = 10.0d0**lifeavg \n")
    f.write("c min properties, flag=0                                               \n")
    f.write("	  IF (flag.EQ.0.0d0) Then                                           \n")
    f.write("	    xlmlife=lifemin \n")
    f.write("	  ELSE IF (flag.EQ.1.0d0) Then                                           \n")
    f.write("	    xlmlife=lifeavg \n")
    f.write("	  End If\n")
    f.write("90    RETURN                                                           \n")
    f.write("      End                                                              \n")
    f.write("c********************************************************************  \n")
    f.write("c Calculate life based on the LMP method (API 530)					    \n")
    f.write("c********************************************************************  \n")
    f.write("c                                                                      \n")
    f.write("      real*8 function xlmlife1(CMNAME,tempr,stress,flag)               \n")
    f.write("	  implicit real*8(a-h,m-z)                                          \n")
    f.write("      character*80 CMNAME                                              \n")
    f.write("c     Equation 2 used for material pointers 7,8,9 and 13\n")
    f.write("      eqn=0.0d0\n")
    i=0
    j=0
    f.write("c********************************************************************  \n")
    while i<mats:
         f.write("      IF (CMNAME.EQ.'"+matname[i]+"') Then\n")
         f.write("      ma0 = "+str(ldata[i,0])+"d0\n")
         f.write("      ma1 = "+str(ldata[i,1])+"d0\n")
         f.write("      ma2 = "+str(ldata[i,2])+"d0\n")
         f.write("      ma3 = "+str(ldata[i,3])+"d0\n")
         f.write("      ma4 = "+str(ldata[i,4])+"d0\n")
         f.write("      ma5 = "+str(ldata[i,5])+"d0\n")
         f.write("      ma6 = "+str(ldata[i,6])+"d0\n")
         f.write("      cmin = "+str(ldata[i,7])+"d0\n")
         f.write("      aa0 = "+str(ldata[i,8])+"d0\n")
         f.write("      aa1 = "+str(ldata[i,9])+"d0\n")
         f.write("      aa2 = "+str(ldata[i,10])+"d0\n")
         f.write("      aa3 = "+str(ldata[i,11])+"d0\n")
         f.write("      aa4 = "+str(ldata[i,12])+"d0\n")
         f.write("      aa5 = "+str(ldata[i,13])+"d0\n")
         f.write("      aa6 = "+str(ldata[i,14])+"d0\n")
         f.write("      cavg = "+str(ldata[i,15])+"d0\n")
         if mat[i]+1==7:
             f.write("      eqn=7.0d0\n")
         elif mat[i]+1==8:
             f.write("      eqn=8.0d0\n")
         elif mat[i]+1==9:
             f.write("      eqn=9.0d0\n")
         elif mat[i]+1==13:
             f.write("      eqn=13.0d0\n")
         f.write("      End if                     \n")
         f.write("c********************************************************************  \n")
         i+=1
    f.write("	  xapi0=ma0+(ma1*stress)+(ma2*stress**2)+(ma3*log(stress))          \n")
    f.write("	  xapi1=aa0+(aa1*stress)+(aa2*stress**2)+(aa3*log(stress))          \n")
    f.write("	  xmin1=1000*xapi0/tempr-cmin                                        \n")
    f.write("	  xmin1=10.0d0**xmin1                                                 \n")
    f.write("	  xavg1=1000*xapi1/tempr-cavg                                        \n")
    f.write("	  xavg1=10.0d0**xavg1                                                \n")
    f.write("c********************************************************************  \n")
    f.write("	  xapi2n=(ma0+(ma2*stress**0.5)+(ma4*stress)+(ma6*stress**1.5))          \n")
    f.write("	  xapi2d=(1+(ma1*stress**0.5)+(ma3*stress)+(ma5*stress**1.5))          \n")
    f.write("	  xapi2=xapi2n/xapi2d          \n")
    f.write("	  xapi3n=(aa0+(aa2*stress**0.5)+(aa4*stress)+(aa6*stress**1.5))          \n")
    f.write("	  xapi3d=(1+(aa1*stress**0.5)+(aa3*stress)+(aa5*stress**1.5))          \n")
    f.write("	  xapi3=xapi2n/xapi2d          \n")
    f.write("	  xmin2=1000*xapi2/tempr-cmin                                        \n")
    f.write("	  xmin2=10.0d0**xmin2                                                 \n")
    f.write("	  xavg2=1000*xapi3/tempr-cavg                                        \n")
    f.write("	  xavg2=10.0d0**xavg2                                                 \n")
    f.write("c********************************************************************  \n")
    f.write("c min properties, flag=0                                               \n")
    f.write("	  IF (flag.EQ.0.0d0) Then                                           \n")
    f.write("	      IF (eqn.EQ.7.0d0) Then\n")
    f.write("	          xlmlife1=xmin2\n")
    f.write("	      ELSE IF (eqn.EQ.8.0d0) Then\n")
    f.write("	          xlmlife1=xmin2\n")
    f.write("	      ELSE IF (eqn.EQ.9.0d0) Then\n")
    f.write("	          xlmlife1=xmin2\n")
    f.write("	      ELSE IF (eqn.EQ.13.0d0) Then\n")
    f.write("	          xlmlife1=xmin2\n")
    f.write("	      ELSE IF (eqn.EQ.0.0d0) Then\n")
    f.write("	          xlmlife1=xmin1\n")
    f.write("	      End If\n")
    f.write("	  End if                                                            \n")
    f.write("c *********************************************************************\n")
    f.write("c avg properties, flag=1                                               \n")
    f.write("	  IF (flag.EQ.1.0d0) Then                                           \n")
    f.write("	      IF (eqn.EQ.7.0d0) Then\n")
    f.write("	      xlmlife1=xavg2\n")
    f.write("	      ELSE IF (eqn.EQ.8.0d0) Then\n")
    f.write("	      xlmlife1=xavg2\n")
    f.write("	      ELSE IF (eqn.EQ.9.0d0) Then\n")
    f.write("	      xlmlife1=xavg2\n")
    f.write("	      ELSE IF (eqn.EQ.13.0d0) Then\n")
    f.write("	      xlmlife1=xavg2\n")
    f.write("	      ELSE IF (eqn.EQ.0.0d0) Then\n")
    f.write("	      xlmlife1=xavg1\n")
    f.write("	      End If\n")
    f.write("	  End if                                                            \n")
    f.write("c                                                                      \n")
    f.write("90    RETURN                                                           \n")
    f.write("      End                                                              \n")
    f.write("c 	                                                                    \n")
    f.write("c *********************************************************************\n")
    f.write("c  Calculate life based on the MPC Omega Method                        \n")
    f.write("c *********************************************************************\n")
    f.write("	  real*8 function omegalife(CMNAME,tempr,stress,sig1,sig2,sig3)            \n")
    f.write("	  implicit real*8(a-h,m-z)                                            \n")
    f.write("	  character*80 CMNAME                                                 \n")
    f.write("c 	  MPC Omega parameter (beta_omega)	                                \n")
    f.write("	  beta_omega="+str(beta_omega)+"d0\n")
    f.write("c 	  Alpha parameter	                                                \n")
    f.write("	  alpha="+str(alpha)+"d0\n")
    f.write("c	MPC Omega strain rate data from API-579                             \n")
    i=0
    j=0
    while i<mats:   
        f.write("      IF (CMNAME.EQ.'"+matname[i]+"') Then\n")
        f.write("      a0="+str(odata[i,0])+"d0\n")
        f.write("      a1="+str(odata[i,1])+"d0\n")
        f.write("      a2="+str(odata[i,2])+"d0\n")
        f.write("      a3="+str(odata[i,3])+"d0\n")
        f.write("      a4="+str(odata[i,4])+"d0\n")
        f.write("      b0="+str(odata[i,5])+"d0\n")
        f.write("      b1="+str(odata[i,6])+"d0\n")
        f.write("      b2="+str(odata[i,7])+"d0\n")
        f.write("      b3="+str(odata[i,8])+"d0\n")
        f.write("      b4="+str(odata[i,9])+"d0\n")
        f.write("c 	  MPC Omega adjustment factor	                                    \n")
        f.write("	  del_cd="+str(delo[j+1])+"d0\n")
        f.write("	  del_sr="+str(delo[j])+"d0\n")
        f.write("	  End if\n")
        f.write("***********************************************************************\n")
        i+=1
        j+=2
    f.write("      s1=log(stress)/log(10.0d0)\n")
    f.write("      del_omega=beta_omega*((sig1+sig2+sig3)/stress-1.0d0)\n")
    f.write("      eta_bn=-((a2+2*a3*s1+3*a4*s1**2)/tempr)\n")
    f.write("      omega=10**((b0+del_cd)+((b1+b2*s1+b3*s1**2+b4*s1**3)/tempr))\n")
    f.write("      omega_n=max((omega-eta_bn),3.0d0)\n")
    f.write("      omega_m=omega_n**(del_omega+1.0d0)+alpha*eta_bn\n")
    f.write("      eps_dot=10**(-((a0+del_sr)+(a1+a2*s1+a3*s1**2+a4*s1**3)/tempr))\n")
    f.write("      omegalife=1/eps_dot/omega_m\n")
    f.write("50    return                                                           \n")
    f.write("      end                                                              \n")    
    f.write("c 	                                                                    \n")     
    f.write("c *********************************************************************\n")
    f.write("c  Subroutine to get Sinh model parameters based on MPC Omega Data\n")
    f.write("c *********************************************************************\n")
    f.write("	  subroutine matprop(CMNAME,acon,sig0,expn,wsrf)                     \n")
    f.write("	  implicit real*8(a-h,m-z)                                            \n")
    f.write("	  character*80 CMNAME                                                 \n")
    f.write("	  wsrf = 1.0d0                                       \n")
    f.write("c	  Sinh model parameters calculated from MPC Omega model from API-579\n")
    f.write("c *********************************************************************\n")
    i=0
    j=0
    while i<mats:
        f.write("c     "+matname[i]+" at "+peak[i]+" ksi and "+temp[i]+" F\n")
        f.write("      IF (CMNAME.EQ.'"+matname[i]+"') Then\n")
        temp="{:1.16f}".format(sindata[j])
        f.write("      acon="+temp+"d0\n")
        f.write("      sig0="+str(round(sindata[j+1],6))+"d0\n")
        f.write("      expn="+str(round(sindata[j+2],6))+"d0\n")
        f.write("	  End if\n")
        f.write("c                                                                      \n")
        f.write("***********************************************************************\n")
        i+=1
        j+=3
    f.write("50    return                                                           \n")
    f.write("      end                                                              \n")    
    f.close()    